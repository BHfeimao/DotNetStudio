@using DotNet.Common.Utility
@model DotNet.Common.Models.Result<DotNet.Common.Collections.PagedList<DotNet.CloudFarm.Domain.Model.Message.MessageModel>>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="sheep_guest message">
    <!--ko if:Messages().length>0-->
    <ul class="message_ul" data-bind="foreach:Messages">
        <li class="clearfix">
            <p class="li_l"><span class="no_read"><img src="/images/no_read.png" data-bind="attr:ReadStatusImg"></span></p>
            <p class="li_r">
                <span class="span1"><!--ko text:StatusDesc--><!--/ko--></span>
                <span class="span2" data-bind="html:Content"></span>
            </p>
        </li>
    </ul>
    <!--/ko-->
    <!--ko if:Messages().length==0-->
    暂无消息
    <!--/ko-->
</div>
<script type="text/javascript">
    var messageListServiceJson=@Html.Raw(JsonHelper.ToJson(Model));
    function MessageListViewModel() {
        var self = this;

        self.Messages = ko.observableArray();

        

    }

    function MessageViewModel() {
        var self = this;
        self.MessageId = ko.observable();

        self.UserId  = ko.observable();

        self.Content  = ko.observable();

        self.CreateTime = ko.observable();

        //短消息状态 0 未读 1 已读
        self.Status = ko.observable(0);

        self.StatusDesc = ko.pureComputed(function() {
            if (self.Status() == 0) {
                return "未读";
            } else if (self.Status() == 1) {
                return "已读";
            }
        });

        self.ReadStatusImg=ko.pureComputed(function(){
            if (self.Status() == 0) {
                return "/images/no_read.png";
            } else if (self.Status() == 1) {
                return "/images/have_read.png";
            }
        });
    }

    $(function() {
        var messageListViewModel = new MessageListViewModel();
        debugger;
        if (messageListServiceJson &&messageListServiceJson.Data  && messageListServiceJson.Data.length > 0) {
            var length = messageListServiceJson.Data.length;
            for (var i = 0; i < length; i++) {
                var messageViewModel = new MessageViewModel();

                messageViewModel.MessageId(messageListServiceJson.Data[i].MessageId);
                messageViewModel.UserId(messageListServiceJson.Data[i].UserId);
                messageViewModel.Content(messageListServiceJson.Data[i].Content);
                messageViewModel.CreateTime(messageListServiceJson.Data[i].CreateTime);
                messageViewModel.Status(messageListServiceJson.Data[i].Status);

                messageListViewModel.Messages.push(messageViewModel);
            }
            
        }
        ko.applyBindings(messageListViewModel);
    });
</script>