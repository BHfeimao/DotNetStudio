@using DotNet.CloudFarm.Domain.Model.Product;
@{
    ViewBag.Title = "产品列表";
    Layout = "~/Views/Shared/_LayoutHouTai.cshtml";
}
<div id="content" class="span10">
    <!-- content starts -->
    <div class="row-fluid sortable">
        <div class="box span12">
					<div class="box-header well" data-original-title>
						<h2><i class="icon-align-justify"></i> 产品列表</h2>
						<div class="box-icon">
							<a href="#" class="btn btn-setting btn-round"><i class="icon-cog"></i></a>
							<a href="#" class="btn btn-minimize btn-round"><i class="icon-chevron-up"></i></a>
							<a href="#" class="btn btn-close btn-round"><i class="icon-remove"></i></a>
						</div>
					</div>
					<div class="box-content">
						<table class="table table-bordered">
							  <thead>
								  <tr>
									  <th>ID</th>
									  <th>名称</th>
                                      <th>图像</th>
									  <th>状态</th>
									  <th>操作</th>                                          
								  </tr>
							  </thead>   
                            <tbody data-bind="foreach: homeViewModel.Products()">

                                <tr>
                                    <td data-bind="text:Id"></td>
                                    <td class="center" data-bind="text:Name"></td>
                                    <td class="center">
                                        <img data-bind="attr:{src:ImgUrl}" style="width:120px;height:120px" />
                                    </td>
                                    <td class="center" >
                                        <span class="label" data-bind="text:Activity"></span>
                                        <!-- ko if: Status()==1 -->
                                        <span class="label label-success">显示</span>
                                        <!-- /ko -->
                                        <!-- ko if: Status()==0 -->
                                        <span class="label">不显示</span>
                                        <!-- /ko -->
                                    </td>
                                    <td class="center">
                                        <!-- ko if:Activity()=="未开始"-->
                                        <a href="javascript:void(0);" data-bind="click: Edit" class="btn btn-info"><i class="icon-edit icon-white"></i>编辑</a>
                                        <a href="javascript:void(0);" data-bind="click: Del" class="btn btn-danger"><i class="icon-edit icon-white"></i>删除</a>

                                        <!-- /ko -->
                                    </td>
                                </tr>
                            </tbody>
						 </table>  
                        <div id="pages"></div>
						 @*<div class="pagination pagination-centered">
						  <ul>
							<li><a href="#">Prev</a></li>
							<li class="active">
							  <a href="#">1</a>
							</li>
							<li><a href="#">2</a></li>
							<li><a href="#">3</a></li>
							<li><a href="#">4</a></li>
							<li><a href="#">Next</a></li>
						  </ul>
						</div>*@     
					</div>
				</div><!--/span-->

    </div>

    <div class="modal hide fade" id="myAlertDialog">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">×</button>
            <h3>提示</h3>
        </div>
        <div class="modal-body">
            <p>确定要删除该项吗？</p>
        </div>
        <div class="modal-footer">
            <a href="javascript:void(0)" id="confirmBtn" class="btn btn-primary">确定</a>
            <a href="#" class="btn" id="cancelBtn" data-dismiss="modal">取消</a>
        </div>
    </div>

    <!-- content ends -->
</div>
@section scripts{
<script type="text/javascript">
    var pageSize = 20;
    var pageIndex = 1;
    var init = true;
    $(document).ready(function () {

        getproducts();
        //$(".pages").pager({ pagenumber: $('#page_no').val(), pagecount: $('#page_count').val(), buttonClickCallback: my_order.PageClick });

    });


    function pager(pageIndex,pageNo)
    {
        $("#pages").pager({ pagenumber: pageIndex, pagecount: pageNo, buttonClickCallback: pageClick });
    }
    function pageClick(pn)
    {
        pageIndex = pn;
        getproducts();
    }

    function ChangeDateFormat(val) {
        if(val!=null)
        {
            var date = new Date(parseInt(val.replace("/Date(", "").replace(")/", ""), 10));
            return date;
        }
        return null;
    }

    function ListViewModel() {
        var self = this;
        self.Products = ko.observableArray([]);
        self.PageSize = ko.observable();
        self.PageIndex = ko.observable();
        self.Count = ko.observable();
        self.PageNo = ko.observable();

    }
    var homeViewModel = new ListViewModel();

    function ProductViewModel() {
        var self = this;

        self.Id = ko.observable();

        //产品名称
        self.Name = ko.observable();

        //产品数量
        self.Stock = ko.observable();

        //当前期销量数量
        self.SaledCount = ko.observable();

        //单价
        self.Price = ko.observable();

        //羊金额
        self.SheepPrice = ko.observable();

        //饲料金额
        self.FeedPrice = ko.observable();

        //人工成本
        self.WorkPrice = ko.observable();

        //预期年化收益率
        self.YearEarningRate = ko.observable();

        //预期收益
        self.Earning = ko.observable();

        //预期收益
        self.EarningRate = ko.observable();

        //活动持续时间 天
        self.EarningDay = ko.observable();

        //羊类型
        self.SheepType = ko.observable();

        //育肥场
        self.SheepFactory = ko.observable();
        //图标
        self.ImgUrl = ko.observable();
        //开始时间
        self.StartTime = ko.observable();
        //结束时间
        self.EndTime = ko.observable();

        self.CreateTime = ko.observable();
        //状态
        self.Status = ko.observable();

        //时间状态：1-未开始；2-申购中；3-申购结束；
        self.Activity = ko.computed(function () {
            var now = new Date();
            if (self.StartTime() > now) {
                return "未开始";
            }
            else if (self.StartTime() <= now && self.EndTime() >= now) {
                return "申购中";
            }
            else {
                return "申购结束";
            }

        });

        self.Edit = function(){
            var id = self.Id();
            document.location.href = "/houtai/ProductAddOrEdit/" + id;
        }
        self.Del = function () {
            var id = self.Id();

            $('#myAlertDialog').modal('show');
            $("#confirmBtn").click(function()
            {
                $.ajax({
                    type: "POST",
                    url: "/houtai/delProduct",
                    data: "pageIndex=" + pageIndex + "&pageSize=" + pageSize + "&id=" + id,
                    success: function (data) {
                        $('#myAlertDialog').modal('hide');
                        FillProducts(data);
                        pager(data.PageIndex, data.PageNo);
                    }
                });
            });
        }
    }

    function getproducts()
    {
        console.log(pageIndex);
        console.log(pageSize);
        $.ajax({
            type: "POST",
            url: "/houtai/getproducts",
            data: "pageIndex=" + pageIndex + "&pageSize=" + pageSize,
            success: function (data) {
                if (data) {
                    FillProducts(data);
                    pager(data.PageIndex, data.PageNo);
                    if (init == true) {
                        ko.applyBindings(homeViewModel);
                        init = false;
                    }
                }
            }
        });
    }

    function FillProducts(data)
    {
        var length = data.Products.length;
        pageSize = data.PageSize;
        pageIndex = data.PageIndex;
        homeViewModel.PageIndex(data.PageIndex);
        homeViewModel.PageSize(data.pageSize);
        homeViewModel.Count(data.Count);
        homeViewModel.Products.removeAll();
        for (var i = 0; i < length; i++) {
            var productViewModel = new ProductViewModel();
            productViewModel.Id(data.Products[i].Id);

            //产品名称
            productViewModel.Name(data.Products[i].Name);

            //产品数量
            productViewModel.Stock(data.Products[i].Stock);

            //当前期销量数量
            productViewModel.SaledCount(data.Products[i].SaledCount);

            //单价
            productViewModel.Price(data.Products[i].Price);

            //羊金额
            productViewModel.SheepPrice(data.Products[i].SheepPrice);

            //饲料金额
            productViewModel.FeedPrice(data.Products[i].FeedPrice);

            //人工成本
            productViewModel.WorkPrice(data.Products[i].WorkPrice);

            productViewModel.Earning(data.Products[i].Earning);
            //预期年化收益率
            productViewModel.YearEarningRate(data.Products[i].YearEarningRate);

            //预期收益
            productViewModel.EarningRate(data.Products[i].EarningRate);

            //活动持续时间 天
            productViewModel.EarningDay(data.Products[i].EarningDay);

            //羊类型
            productViewModel.SheepType(data.Products[i].SheepType);

            //育肥场
            productViewModel.SheepFactory(data.Products[i].SheepFactory);
            //育肥场
            productViewModel.ImgUrl(data.Products[i].ImgUrl);
            //开始时间
            productViewModel.StartTime(ChangeDateFormat(data.Products[i].StartTime));
            //结束时间
            productViewModel.EndTime(ChangeDateFormat(data.Products[i].EndTime));

            productViewModel.CreateTime(ChangeDateFormat(data.Products[i].CreateTime));
            //状态
            productViewModel.Status(data.Products[i].Status);

            homeViewModel.Products.push(productViewModel);
        }

    }
    </script>    
}
